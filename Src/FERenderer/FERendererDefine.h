#pragma once
#ifndef _FE_RENDERER_DEFINE
#define _FE_RENDERER_DEFINE

#include <FEBuildSetting.h>
#include <FEMath.h>
#include <FEDefine.h>

#ifdef FE_DX11

#define FE_FLOAT32_MAX	( 3.402823466e+38f )

enum FE_BIND_FLAG
{
	FE_BIND_VERTEX_BUFFER = 0x1L,
	FE_BIND_INDEX_BUFFER = 0x2L,
	FE_BIND_CONSTANT_BUFFER = 0x4L
};
enum FE_USAGE
{
	FE_USAGE_DEFAULT = 0,
	FE_USAGE_IMMUTABLE = 1,
	FE_USAGE_DYNAMIC = 2,
	FE_USAGE_STAGING = 3
};
enum FEGI_FORMAT
{
	FEGI_FORMAT_UNKNOWN = 0,
	FEGI_FORMAT_R32G32B32A32_TYPELESS = 1,
	FEGI_FORMAT_R32G32B32A32_FLOAT = 2,
	FEGI_FORMAT_R32G32B32A32_UINT = 3,
	FEGI_FORMAT_R32G32B32A32_SINT = 4,
	FEGI_FORMAT_R32G32B32_TYPELESS = 5,
	FEGI_FORMAT_R32G32B32_FLOAT = 6,
	FEGI_FORMAT_R32G32B32_UINT = 7,
	FEGI_FORMAT_R32G32B32_SINT = 8,
	FEGI_FORMAT_R16G16B16A16_TYPELESS = 9,
	FEGI_FORMAT_R16G16B16A16_FLOAT = 10,
	FEGI_FORMAT_R16G16B16A16_UNORM = 11,
	FEGI_FORMAT_R16G16B16A16_UINT = 12,
	FEGI_FORMAT_R16G16B16A16_SNORM = 13,
	FEGI_FORMAT_R16G16B16A16_SINT = 14,
	FEGI_FORMAT_R32G32_TYPELESS = 15,
	FEGI_FORMAT_R32G32_FLOAT = 16,
	FEGI_FORMAT_R32G32_UINT = 17,
	FEGI_FORMAT_R32G32_SINT = 18,
	FEGI_FORMAT_R32G8X24_TYPELESS = 19,
	FEGI_FORMAT_D32_FLOAT_S8X24_UINT = 20,
	FEGI_FORMAT_R32_FLOAT_X8X24_TYPELESS = 21,
	FEGI_FORMAT_X32_TYPELESS_G8X24_UINT = 22,
	FEGI_FORMAT_R10G10B10A2_TYPELESS = 23,
	FEGI_FORMAT_R10G10B10A2_UNORM = 24,
	FEGI_FORMAT_R10G10B10A2_UINT = 25,
	FEGI_FORMAT_R11G11B10_FLOAT = 26,
	FEGI_FORMAT_R8G8B8A8_TYPELESS = 27,
	FEGI_FORMAT_R8G8B8A8_UNORM = 28,
	FEGI_FORMAT_R8G8B8A8_UNORM_SRGB = 29,
	FEGI_FORMAT_R8G8B8A8_UINT = 30,
	FEGI_FORMAT_R8G8B8A8_SNORM = 31,
	FEGI_FORMAT_R8G8B8A8_SINT = 32,
	FEGI_FORMAT_R16G16_TYPELESS = 33,
	FEGI_FORMAT_R16G16_FLOAT = 34,
	FEGI_FORMAT_R16G16_UNORM = 35,
	FEGI_FORMAT_R16G16_UINT = 36,
	FEGI_FORMAT_R16G16_SNORM = 37,
	FEGI_FORMAT_R16G16_SINT = 38,
	FEGI_FORMAT_R32_TYPELESS = 39,
	FEGI_FORMAT_D32_FLOAT = 40,
	FEGI_FORMAT_R32_FLOAT = 41,
	FEGI_FORMAT_R32_UINT = 42,
	FEGI_FORMAT_R32_SINT = 43,
	FEGI_FORMAT_R24G8_TYPELESS = 44,
	FEGI_FORMAT_D24_UNORM_S8_UINT = 45,
	FEGI_FORMAT_R24_UNORM_X8_TYPELESS = 46,
	FEGI_FORMAT_X24_TYPELESS_G8_UINT = 47,
	FEGI_FORMAT_R8G8_TYPELESS = 48,
	FEGI_FORMAT_R8G8_UNORM = 49,
	FEGI_FORMAT_R8G8_UINT = 50,
	FEGI_FORMAT_R8G8_SNORM = 51,
	FEGI_FORMAT_R8G8_SINT = 52,
	FEGI_FORMAT_R16_TYPELESS = 53,
	FEGI_FORMAT_R16_FLOAT = 54,
	FEGI_FORMAT_D16_UNORM = 55,
	FEGI_FORMAT_R16_UNORM = 56,
	FEGI_FORMAT_R16_UINT = 57,
	FEGI_FORMAT_R16_SNORM = 58,
	FEGI_FORMAT_R16_SINT = 59,
	FEGI_FORMAT_R8_TYPELESS = 60,
	FEGI_FORMAT_R8_UNORM = 61,
	FEGI_FORMAT_R8_UINT = 62,
	FEGI_FORMAT_R8_SNORM = 63,
	FEGI_FORMAT_R8_SINT = 64,
	FEGI_FORMAT_A8_UNORM = 65,
	FEGI_FORMAT_R1_UNORM = 66,
	FEGI_FORMAT_R9G9B9E5_SHAREDEXP = 67,
	FEGI_FORMAT_R8G8_B8G8_UNORM = 68,
	FEGI_FORMAT_G8R8_G8B8_UNORM = 69,
	FEGI_FORMAT_BC1_TYPELESS = 70,
	FEGI_FORMAT_BC1_UNORM = 71,
	FEGI_FORMAT_BC1_UNORM_SRGB = 72,
	FEGI_FORMAT_BC2_TYPELESS = 73,
	FEGI_FORMAT_BC2_UNORM = 74,
	FEGI_FORMAT_BC2_UNORM_SRGB = 75,
	FEGI_FORMAT_BC3_TYPELESS = 76,
	FEGI_FORMAT_BC3_UNORM = 77,
	FEGI_FORMAT_BC3_UNORM_SRGB = 78,
	FEGI_FORMAT_BC4_TYPELESS = 79,
	FEGI_FORMAT_BC4_UNORM = 80,
	FEGI_FORMAT_BC4_SNORM = 81,
	FEGI_FORMAT_BC5_TYPELESS = 82,
	FEGI_FORMAT_BC5_UNORM = 83,
	FEGI_FORMAT_BC5_SNORM = 84,
	FEGI_FORMAT_B5G6R5_UNORM = 85,
	FEGI_FORMAT_B5G5R5A1_UNORM = 86,
	FEGI_FORMAT_B8G8R8A8_UNORM = 87,
	FEGI_FORMAT_B8G8R8X8_UNORM = 88,
	FEGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM = 89,
	FEGI_FORMAT_B8G8R8A8_TYPELESS = 90,
	FEGI_FORMAT_B8G8R8A8_UNORM_SRGB = 91,
	FEGI_FORMAT_B8G8R8X8_TYPELESS = 92,
	FEGI_FORMAT_B8G8R8X8_UNORM_SRGB = 93,
	FEGI_FORMAT_BC6H_TYPELESS = 94,
	FEGI_FORMAT_BC6H_UF16 = 95,
	FEGI_FORMAT_BC6H_SF16 = 96,
	FEGI_FORMAT_BC7_TYPELESS = 97,
	FEGI_FORMAT_BC7_UNORM = 98,
	FEGI_FORMAT_BC7_UNORM_SRGB = 99,
	FEGI_FORMAT_AYUV = 100,
	FEGI_FORMAT_Y410 = 101,
	FEGI_FORMAT_Y416 = 102,
	FEGI_FORMAT_NV12 = 103,
	FEGI_FORMAT_P010 = 104,
	FEGI_FORMAT_P016 = 105,
	FEGI_FORMAT_420_OPAQUE = 106,
	FEGI_FORMAT_YUY2 = 107,
	FEGI_FORMAT_Y210 = 108,
	FEGI_FORMAT_Y216 = 109,
	FEGI_FORMAT_NV11 = 110,
	FEGI_FORMAT_AI44 = 111,
	FEGI_FORMAT_IA44 = 112,
	FEGI_FORMAT_P8 = 113,
	FEGI_FORMAT_A8P8 = 114,
	FEGI_FORMAT_B4G4R4A4_UNORM = 115,

	FEGI_FORMAT_P208 = 130,
	FEGI_FORMAT_V208 = 131,
	FEGI_FORMAT_V408 = 132,


	FEGI_FORMAT_FORCE_UINT = 0xffffffff
};
enum FE_PRIMITIVE_TOPOLOGY
{
	FE_PRIMITIVE_TOPOLOGY_UNDEFINED = 0,
	FE_PRIMITIVE_TOPOLOGY_POINTLIST = 1,
	FE_PRIMITIVE_TOPOLOGY_LINELIST = 2,
	FE_PRIMITIVE_TOPOLOGY_LINESTRIP = 3,
	FE_PRIMITIVE_TOPOLOGY_TRIANGLELIST = 4,
	FE_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP = 5,
	FE_PRIMITIVE_TOPOLOGY_LINELIST_ADJ = 10,
	FE_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ = 11,
	FE_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ = 12,
	FE_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ = 13,
	FE_PRIMITIVE_TOPOLOGY_1_CONTROL_POINT_PATCHLIST = 33,
	FE_PRIMITIVE_TOPOLOGY_2_CONTROL_POINT_PATCHLIST = 34,
	FE_PRIMITIVE_TOPOLOGY_3_CONTROL_POINT_PATCHLIST = 35,
	FE_PRIMITIVE_TOPOLOGY_4_CONTROL_POINT_PATCHLIST = 36,
	FE_PRIMITIVE_TOPOLOGY_5_CONTROL_POINT_PATCHLIST = 37,
	FE_PRIMITIVE_TOPOLOGY_6_CONTROL_POINT_PATCHLIST = 38,
	FE_PRIMITIVE_TOPOLOGY_7_CONTROL_POINT_PATCHLIST = 39,
	FE_PRIMITIVE_TOPOLOGY_8_CONTROL_POINT_PATCHLIST = 40,
	FE_PRIMITIVE_TOPOLOGY_9_CONTROL_POINT_PATCHLIST = 41,
	FE_PRIMITIVE_TOPOLOGY_10_CONTROL_POINT_PATCHLIST = 42,
	FE_PRIMITIVE_TOPOLOGY_11_CONTROL_POINT_PATCHLIST = 43,
	FE_PRIMITIVE_TOPOLOGY_12_CONTROL_POINT_PATCHLIST = 44,
	FE_PRIMITIVE_TOPOLOGY_13_CONTROL_POINT_PATCHLIST = 45,
	FE_PRIMITIVE_TOPOLOGY_14_CONTROL_POINT_PATCHLIST = 46,
	FE_PRIMITIVE_TOPOLOGY_15_CONTROL_POINT_PATCHLIST = 47,
	FE_PRIMITIVE_TOPOLOGY_16_CONTROL_POINT_PATCHLIST = 48,
	FE_PRIMITIVE_TOPOLOGY_17_CONTROL_POINT_PATCHLIST = 49,
	FE_PRIMITIVE_TOPOLOGY_18_CONTROL_POINT_PATCHLIST = 50,
	FE_PRIMITIVE_TOPOLOGY_19_CONTROL_POINT_PATCHLIST = 51,
	FE_PRIMITIVE_TOPOLOGY_20_CONTROL_POINT_PATCHLIST = 52,
	FE_PRIMITIVE_TOPOLOGY_21_CONTROL_POINT_PATCHLIST = 53,
	FE_PRIMITIVE_TOPOLOGY_22_CONTROL_POINT_PATCHLIST = 54,
	FE_PRIMITIVE_TOPOLOGY_23_CONTROL_POINT_PATCHLIST = 55,
	FE_PRIMITIVE_TOPOLOGY_24_CONTROL_POINT_PATCHLIST = 56,
	FE_PRIMITIVE_TOPOLOGY_25_CONTROL_POINT_PATCHLIST = 57,
	FE_PRIMITIVE_TOPOLOGY_26_CONTROL_POINT_PATCHLIST = 58,
	FE_PRIMITIVE_TOPOLOGY_27_CONTROL_POINT_PATCHLIST = 59,
	FE_PRIMITIVE_TOPOLOGY_28_CONTROL_POINT_PATCHLIST = 60,
	FE_PRIMITIVE_TOPOLOGY_29_CONTROL_POINT_PATCHLIST = 61,
	FE_PRIMITIVE_TOPOLOGY_30_CONTROL_POINT_PATCHLIST = 62,
	FE_PRIMITIVE_TOPOLOGY_31_CONTROL_POINT_PATCHLIST = 63,
	FE_PRIMITIVE_TOPOLOGY_32_CONTROL_POINT_PATCHLIST = 64
};
enum FE_COMPARISON_FUNC
{
	FE_COMPARISON_NEVER = 1,
	FE_COMPARISON_LESS = 2,
	FE_COMPARISON_EQUAL = 3,
	FE_COMPARISON_LESS_EQUAL = 4,
	FE_COMPARISON_GREATER = 5,
	FE_COMPARISON_NOT_EQUAL = 6,
	FE_COMPARISON_GREATER_EQUAL = 7,
	FE_COMPARISON_ALWAYS = 8
};

// Rasterizer     Fill Cull Clockwise DepthClip Scissor Multisample AntialiasedLine
// Bit(1byte)   : 0    00   0         0         0       0           0
enum FE_RASTERIZER_FLAG : unsigned char
{
	FE_RS_SOLID = 0x00,
	FE_RS_WIREFRAME = 0x80,
	FE_RS_CULL_NONE = 0x00,
	FE_RS_CULL_FRONT = 0x40,
	FE_RS_CULL_BACK = 0x20,
	FE_RS_CLOCKWISE = 0x00,
	FE_RS_COUNTER_CLOCKWISE = 0x10,
	FE_RS_DEPTH_CLIP_ON = 0x00,
	FE_RS_DEPTH_CLIP_OFF = 0x08,
	FE_RS_SCISSOR_ON = 0x04,
	FE_RS_SCISSOR_OFF = 0x00,
	FE_RS_MULTISAMPLE_ON = 0x02,
	FE_RS_MULTISAMPLE_OFF = 0x00,
	FE_RS_ANTIALIASEDLINE_ON = 0x01,
	FE_RS_ANTIALIASEDLINE_Off = 0x00
};

// DepthStencil   DT DW DC  SE SFFO SFDFO SFPO SFC SBFO SBDFO SBPO SBC TEMP
// Bit(4byte)   : 0  0  000 0  000  000   000  000 000  000   000  000 00
enum FE_DEPTH_STENCIL_FLAG : unsigned long
{
	FE_DS_DEPTH_TEST_ON = 0x00000000,
	FE_DS_DEPTH_TEST_OFF = 0x80000000,
	FE_DS_DEPTH_WRITE_ON = 0x00000000,
	FE_DS_DEPTH_WRITE_OFF = 0x40000000,
	FE_DS_DEPTH_COMPARISON_NEVER = 0x08000000,
	FE_DS_DEPTH_COMPARISON_LESS = 0x00000000,
	FE_DS_DEPTH_COMPARISON_EQUAL = 0x10000000,
	FE_DS_DEPTH_COMPARISON_LESS_EQUAL = 0x18000000,
	FE_DS_DEPTH_COMPARISON_GREATER = 0x20000000,
	FE_DS_DEPTH_COMPARISON_NOT_EQUAL = 0x28000000,
	FE_DS_DEPTH_COMPARISON_GREATER_EQUAL = 0x30000000,
	FE_DS_DEPTH_COMPARISON_ALWAYS = 0x38000000,
	FE_DS_STENCIL_ON = 0x04000000,
	FE_DS_STENCIL_OFF = 0x00000000,
	FE_DS_STENCIL_FRONT_FAIL_OP_KEEP = 0x00000000,
	FE_DS_STENCIL_FRONT_FAIL_OP_ZERO = 0x00800000,
	FE_DS_STENCIL_FRONT_FAIL_OP_REPLACE = 0x01000000,
	FE_DS_STENCIL_FRONT_FAIL_OP_INCR_SAT = 0x01800000,
	FE_DS_STENCIL_FRONT_FAIL_OP_DECR_SAT = 0x02000000,
	FE_DS_STENCIL_FRONT_FAIL_OP_INVERT = 0x02800000,
	FE_DS_STENCIL_FRONT_FAIL_OP_INCR = 0x03000000,
	FE_DS_STENCIL_FRONT_FAIL_OP_DECR = 0x03800000,
	FE_DS_STENCIL_FRONT_DEPTH_FAIL_OP_KEEP = 0x00000000,
	FE_DS_STENCIL_FRONT_DEPTH_FAIL_OP_ZERO = 0x00100000,
	FE_DS_STENCIL_FRONT_DEPTH_FAIL_OP_REPLACE = 0x00200000,
	FE_DS_STENCIL_FRONT_DEPTH_FAIL_OP_INCR_SAT = 0x00300000,
	FE_DS_STENCIL_FRONT_DEPTH_FAIL_OP_DECR_SAT = 0x00400000,
	FE_DS_STENCIL_FRONT_DEPTH_FAIL_OP_INVERT = 0x00500000,
	FE_DS_STENCIL_FRONT_DEPTH_FAIL_OP_INCR = 0x00600000,
	FE_DS_STENCIL_FRONT_DEPTH_FAIL_OP_DECR = 0x00700000,
	FE_DS_STENCIL_FRONT_PASS_OP_KEEP = 0x00000000,
	FE_DS_STENCIL_FRONT_PASS_OP_ZERO = 0x00020000,
	FE_DS_STENCIL_FRONT_PASS_OP_REPLACE = 0x00040000,
	FE_DS_STENCIL_FRONT_PASS_OP_INCR_SAT = 0x00060000,
	FE_DS_STENCIL_FRONT_PASS_OP_DECR_SAT = 0x00080000,
	FE_DS_STENCIL_FRONT_PASS_OP_INVERT = 0x000A0000,
	FE_DS_STENCIL_FRONT_PASS_OP_INCR = 0x000C0000,
	FE_DS_STENCIL_FRONT_PASS_OP_DECR = 0x000E0000,
	FE_DS_STENCIL_FRONT_COMPARISON_NEVER = 0x00004000,
	FE_DS_STENCIL_FRONT_COMPARISON_LESS = 0x00008000,
	FE_DS_STENCIL_FRONT_COMPARISON_EQUAL = 0x0000C000,
	FE_DS_STENCIL_FRONT_COMPARISON_LESS_EQUAL = 0x00010000,
	FE_DS_STENCIL_FRONT_COMPARISON_GREATER = 0x00014000,
	FE_DS_STENCIL_FRONT_COMPARISON_NOT_EQUAL = 0x00018000,
	FE_DS_STENCIL_FRONT_COMPARISON_GREATER_EQUAL = 0x0001C000,
	FE_DS_STENCIL_FRONT_COMPARISON_ALWAYS = 0x00000000,
	FE_DS_STENCIL_BACK_FAIL_OP_KEEP = 0x00000000,
	FE_DS_STENCIL_BACK_FAIL_OP_ZERO = 0x00000800,
	FE_DS_STENCIL_BACK_FAIL_OP_REPLACE = 0x00001000,
	FE_DS_STENCIL_BACK_FAIL_OP_INCR_SAT = 0x00001800,
	FE_DS_STENCIL_BACK_FAIL_OP_DECR_SAT = 0x00002000,
	FE_DS_STENCIL_BACK_FAIL_OP_INVERT = 0x00002800,
	FE_DS_STENCIL_BACK_FAIL_OP_INCR = 0x00003000,
	FE_DS_STENCIL_BACK_FAIL_OP_DECR = 0x00003800,
	FE_DS_STENCIL_BACK_DEPTH_FAIL_OP_KEEP = 0x00000000,
	FE_DS_STENCIL_BACK_DEPTH_FAIL_OP_ZERO = 0x00000100,
	FE_DS_STENCIL_BACK_DEPTH_FAIL_OP_REPLACE = 0x00000200,
	FE_DS_STENCIL_BACK_DEPTH_FAIL_OP_INCR_SAT = 0x00000300,
	FE_DS_STENCIL_BACK_DEPTH_FAIL_OP_DECR_SAT = 0x00000400,
	FE_DS_STENCIL_BACK_DEPTH_FAIL_OP_INVERT = 0x00000500,
	FE_DS_STENCIL_BACK_DEPTH_FAIL_OP_INCR = 0x00000600,
	FE_DS_STENCIL_BACK_DEPTH_FAIL_OP_DECR = 0x00000700,
	FE_DS_STENCIL_BACK_PASS_OP_KEEP = 0x00000000,
	FE_DS_STENCIL_BACK_PASS_OP_ZERO = 0x00000020,
	FE_DS_STENCIL_BACK_PASS_OP_REPLACE = 0x00000040,
	FE_DS_STENCIL_BACK_PASS_OP_INCR_SAT = 0x00000060,
	FE_DS_STENCIL_BACK_PASS_OP_DECR_SAT = 0x00000080,
	FE_DS_STENCIL_BACK_PASS_OP_INVERT = 0x000000A0,
	FE_DS_STENCIL_BACK_PASS_OP_INCR = 0x000000C0,
	FE_DS_STENCIL_BACK_PASS_OP_DECR = 0x000000E0,
	FE_DS_STENCIL_BACK_COMPARISON_NEVER = 0x00000004,
	FE_DS_STENCIL_BACK_COMPARISON_LESS = 0x00000008,
	FE_DS_STENCIL_BACK_COMPARISON_EQUAL = 0x0000000C,
	FE_DS_STENCIL_BACK_COMPARISON_LESS_EQUAL = 0x00000010,
	FE_DS_STENCIL_BACK_COMPARISON_GREATER = 0x00000014,
	FE_DS_STENCIL_BACK_COMPARISON_NOT_EQUAL = 0x00000018,
	FE_DS_STENCIL_BACK_COMPARISON_GREATER_EQUAL = 0x0000001C,
	FE_DS_STENCIL_BACK_COMPARISON_ALWAYS = 0x00000000,
};

// Filter
enum FE_FILTER
{
	FE_FILTER_MIN_MAG_MIP_POINT = 0,
	FE_FILTER_MIN_MAG_POINT_MIP_LINEAR = 0x1,
	FE_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x4,
	FE_FILTER_MIN_POINT_MAG_MIP_LINEAR = 0x5,
	FE_FILTER_MIN_LINEAR_MAG_MIP_POINT = 0x10,
	FE_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x11,
	FE_FILTER_MIN_MAG_LINEAR_MIP_POINT = 0x14,
	FE_FILTER_MIN_MAG_MIP_LINEAR = 0x15,
	FE_FILTER_ANISOTROPIC = 0x55,
	FE_FILTER_COMPARISON_MIN_MAG_MIP_POINT = 0x80,
	FE_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR = 0x81,
	FE_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x84,
	FE_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR = 0x85,
	FE_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT = 0x90,
	FE_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x91,
	FE_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT = 0x94,
	FE_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR = 0x95,
	FE_FILTER_COMPARISON_ANISOTROPIC = 0xd5,
	FE_FILTER_MINIMUM_MIN_MAG_MIP_POINT = 0x100,
	FE_FILTER_MINIMUM_MIN_MAG_POINT_MIP_LINEAR = 0x101,
	FE_FILTER_MINIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x104,
	FE_FILTER_MINIMUM_MIN_POINT_MAG_MIP_LINEAR = 0x105,
	FE_FILTER_MINIMUM_MIN_LINEAR_MAG_MIP_POINT = 0x110,
	FE_FILTER_MINIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x111,
	FE_FILTER_MINIMUM_MIN_MAG_LINEAR_MIP_POINT = 0x114,
	FE_FILTER_MINIMUM_MIN_MAG_MIP_LINEAR = 0x115,
	FE_FILTER_MINIMUM_ANISOTROPIC = 0x155,
	FE_FILTER_MAXIMUM_MIN_MAG_MIP_POINT = 0x180,
	FE_FILTER_MAXIMUM_MIN_MAG_POINT_MIP_LINEAR = 0x181,
	FE_FILTER_MAXIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x184,
	FE_FILTER_MAXIMUM_MIN_POINT_MAG_MIP_LINEAR = 0x185,
	FE_FILTER_MAXIMUM_MIN_LINEAR_MAG_MIP_POINT = 0x190,
	FE_FILTER_MAXIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x191,
	FE_FILTER_MAXIMUM_MIN_MAG_LINEAR_MIP_POINT = 0x194,
	FE_FILTER_MAXIMUM_MIN_MAG_MIP_LINEAR = 0x195,
	FE_FILTER_MAXIMUM_ANISOTROPIC = 0x1d5
};

// AddressMode
enum FE_ADDRESS_MODE
{
	FE_ADDRESS_MODE_WRAP = 1,
	FE_ADDRESS_MODE_MIRROR = 2,
	FE_ADDRESS_MODE_CLAMP = 3,
	FE_ADDRESS_MODE_BORDER = 4,
	FE_ADDRESS_MODE_MIRROR_ONCE = 5
};

// Blend State
enum FE_BLEND
{
	FE_BLEND_ZERO = 1,
	FE_BLEND_ONE = 2,
	FE_BLEND_SRC_COLOR = 3,
	FE_BLEND_INV_SRC_COLOR = 4,
	FE_BLEND_SRC_ALPHA = 5,
	FE_BLEND_INV_SRC_ALPHA = 6,
	FE_BLEND_DEST_ALPHA = 7,
	FE_BLEND_INV_DEST_ALPHA = 8,
	FE_BLEND_DEST_COLOR = 9,
	FE_BLEND_INV_DEST_COLOR = 10,
	FE_BLEND_SRC_ALPHA_SAT = 11,
	FE_BLEND_BLEND_FACTOR = 14,
	FE_BLEND_INV_BLEND_FACTOR = 15,
	FE_BLEND_SRC1_COLOR = 16,
	FE_BLEND_INV_SRC1_COLOR = 17,
	FE_BLEND_SRC1_ALPHA = 18,
	FE_BLEND_INV_SRC1_ALPHA = 19
};
enum FE_BLEND_OP
{
	FE_BLEND_OP_ADD = 1,
	FE_BLEND_OP_SUBTRACT = 2,
	FE_BLEND_OP_REV_SUBTRACT = 3,
	FE_BLEND_OP_MIN = 4,
	FE_BLEND_OP_MAX = 5
};
enum FE_COLOR_WRITE_ENABLE
{
	FE_COLOR_WRITE_ENABLE_RED = 1,
	FE_COLOR_WRITE_ENABLE_GREEN = 2,
	FE_COLOR_WRITE_ENABLE_BLUE = 4,
	FE_COLOR_WRITE_ENABLE_ALPHA = 8,
	FE_COLOR_WRITE_ENABLE_ALL = (((FE_COLOR_WRITE_ENABLE_RED | FE_COLOR_WRITE_ENABLE_GREEN) | FE_COLOR_WRITE_ENABLE_BLUE) | FE_COLOR_WRITE_ENABLE_ALPHA)
};
struct FE_RENDER_TARGET_BLEND_DESC
{
	bool BlendEnable;
	FE_BLEND SrcBlend;
	FE_BLEND DestBlend;
	FE_BLEND_OP BlendOp;
	FE_BLEND SrcBlendAlpha;
	FE_BLEND DestBlendAlpha;
	FE_BLEND_OP BlendOpAlpha;
	BYTE RenderTargetWriteMask;
	FE_RENDER_TARGET_BLEND_DESC()
		: BlendEnable(false),
		SrcBlend(FE_BLEND_ONE),
		DestBlend(FE_BLEND_ZERO),
		BlendOp(FE_BLEND_OP_ADD),
		SrcBlendAlpha(FE_BLEND_ONE),
		DestBlendAlpha(FE_BLEND_ZERO),
		BlendOpAlpha(FE_BLEND_OP_ADD),
		RenderTargetWriteMask(FE_COLOR_WRITE_ENABLE_ALL) {}

	bool operator==(const FE_RENDER_TARGET_BLEND_DESC& rhs) const
	{
		if (BlendEnable == rhs.BlendEnable &&
			SrcBlend == rhs.SrcBlend &&
			DestBlend == rhs.DestBlend &&
			BlendOp == rhs.BlendOp &&
			SrcBlendAlpha == rhs.SrcBlendAlpha &&
			DestBlendAlpha == rhs.DestBlendAlpha &&
			BlendOpAlpha == rhs.BlendOpAlpha &&
			RenderTargetWriteMask == rhs.RenderTargetWriteMask)
			return true;

		return false;
	}
};
struct FE_BLEND_DESC
{
	bool AlphaToCoverageEnable;
	bool IndependentBlendEnable;
	FE_RENDER_TARGET_BLEND_DESC RenderTarget[8];
	FE_BLEND_DESC()	: AlphaToCoverageEnable(false), IndependentBlendEnable(false) {}

	bool operator==(const FE_BLEND_DESC& rhs) const
	{
		if (AlphaToCoverageEnable == rhs.AlphaToCoverageEnable &&
			IndependentBlendEnable == rhs.IndependentBlendEnable &&
			RenderTarget[0] == rhs.RenderTarget[0] &&
			RenderTarget[1] == rhs.RenderTarget[1] &&
			RenderTarget[2] == rhs.RenderTarget[2] &&
			RenderTarget[3] == rhs.RenderTarget[3] &&
			RenderTarget[4] == rhs.RenderTarget[4] &&
			RenderTarget[5] == rhs.RenderTarget[5] &&
			RenderTarget[6] == rhs.RenderTarget[6] &&
			RenderTarget[7] == rhs.RenderTarget[7])
			return true;

		return false;
	}
};
#endif
#endif