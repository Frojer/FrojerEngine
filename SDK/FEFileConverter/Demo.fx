//
//
// Demo.fx : 기본 셰이더 소스.
//
// 2003.11.4. Kihong Kim / mad_dog@hanmail.net
// 2010.12.01. Update. (DX11.Jun.2010)
// 2016.12.27. Update. (DX11. Windows SDK 8.1)
//


// 상수 버퍼 : CPU (어플리케이션) 으로부터 공급되는 데이터 전용 버퍼.★
//          : 공급되는 데이터와 규격과 구성이 일치해야 합니다.
cbuffer ConstBuffer //: register(b0)  //상수버퍼 0번에 등록 (최대 14개. b0~b13)
{
    float4 Color;   //출력색
    float  fMove;   //이동량.
    matrix mTM;     //변환행렬 (Transform Matrix)
};

 
//VS 출력 구조체.
struct VSOutput
{
    float4 pos : SV_POSITION;		//[출력] (변환된) 정점 좌표 
    float4 col : COLOR0;			//[출력] (계산된) 정점색 : "Diffuse"
};


// 셰이더 내부 함수 선언.
// 사용자가 필요에 맞게 자유롭게 제작이 가능합니다.
float4 transform(float4 pos);




////////////////////////////////////////////////////////////////////////////// 
//
// Vertex Shader Main : 정점 셰이더 메인 함수.
//
// 엔진(어플리케이션)에서  Draw 가 호출되면 전체 렌더링 파이프라인이 동작하며,
// 정점버퍼로부터 각 정점의 정보가 1세트씩 정점 셰이더로 공급됩니다.
// 정점셰이더는 정점별(Per-Vertex) 연산을 수행함을 기억합시다.
//
////////////////////////////////////////////////////////////////////////////// 

VSOutput VS_Main(
				  float4 pos : POSITION,    //[입력] 정점좌표. Vertex Position (Model Space, 3D)
				  float4 col : COLOR0       //[입력] 정점색 Vertex Color : "Diffuse"
				)
{
	//* 아래의 테스트를 수행하기 전에  
    //* VS 에 상수 버퍼가 설정되어 있어야 합니다.★    

	//[테스트1] 이동 변환.★
	pos.x += fMove;
		
		
    //정점 좌표 변환.★ 
    pos = transform(pos);
	
 
	//[테스트5] 외부 색상 출력.
     //o.col = Color;

    //데이터 출력. : 출력된 결과는 다음 '스테이지' 로 전달 됩니다.
    //정점 셰이더는 '위치'를 반드시 출력해야 합니다.
	VSOutput o = (VSOutput)0;
    o.pos = pos;
    o.col = col;
         
	return o;
}




////////////////////////////////////////////////////////////////////////////// 
//
// 셰이더 내부 함수 정의 : 사용자 정의 함수는 시멘틱이 필요 없습니다.
//
// transform : 입력된 좌표를 클립스페이스 (Clip Space) 로 변환합니다.
//             pos :  0 ~ 800  --> -1 ~ +1
float4 transform(float4 pos) 		//시멘틱 불필요.
{
    pos.x = (pos.x - 400) / 400;   //화면 크기의 1/2 곱. 현재 해상도 (800x600) 기준.
    pos.y = (pos.y - 300) / -300;  //y 축 반전 필요. 

    /*상동 표현.
    pos.x = (pos.x / 400) - 1;  
    pos.y = (pos.y / 300) - 1;
    pos.y = -pos.y; //y 축 반전 필요.     
    */

    //결과 출력. 시멘틱 불필요.
    return pos;                 
}

 



////////////////////////////////////////////////////////////////////////////// 
//
// Pixel Shader Main : 픽셀 셰이더 메인 함수.
//
////////////////////////////////////////////////////////////////////////////// 

float4 PS_Main(
				float4 pos : SV_POSITION,   //[입력] (보간된) 픽셀별 좌표. (Screen, 2D), 필수
				float4 col : COLOR0         //[입력] (보간된) 픽셀별 색상. (Pixel Color : "Diffuse")
				) : SV_TARGET               //[출력] 색상.(필수), "렌더타겟" 으로 출력합니다.
{
	
     
    //지역 변수. 색상값은 4성분 벡터로 표현 합니다. { R, G, B, A } 순. 
    //아래와 같은 다양한 방식으로 초기화가 가능합니다.
    float4 color = 1;                       //color = { 1, 1, 1, 1} 와 동일의미. "100% 흰색"
 
	 
    //[테스트1] 렌더링 파이프라인에서 공급된 색상을 (그대로) 출력..
    color = col;            
    
    //[테스트2] 외부 색상 출력. (상수버퍼가 PS 에 설정되어 있어야 합니다.)★
    //color = Color;
    

    //[계산 결과] 색상 출력. 
    return color;   
}



/**************** end of file "Demo.fx" ***********************/
